{"version":3,"sources":["models/Digimon.ts","models/EvolutionRequirements.ts","models/DigimonList.ts","components/DigiSlotMachine.styled.tsx","components/RequirementsTable.tsx","components/InfoCard.tsx","components/DigiSlotMachine.tsx","index.tsx"],"names":["Level","Type","DigimonName","Digimon","constructor","name","level","type","req","evolutionPath","digimonBonus","EvolutionRequirements","hp","mp","offense","defense","speed","brains","care","weight","discipline","happiness","battles","techs","minCare","minBattles","digimonList","Botamon","Fresh","Data","Koromon","Sukamon","Poyomon","Tokomon","Punimon","Tsunomon","Yuramon","Tanemon","InTraining","Agumon","Gabumon","Kunemon","Palmon","Betamon","Patamon","Biyomon","Elecmon","Penguinmon","Rookie","Vaccine","Greymon","Meramon","Birdramon","Centarumon","Monochromon","Tyrannomon","Numemon","Nanimon","Virus","Seadramon","Whamon","Shellmon","Coelamon","Airdramon","Kokatorimon","Unimon","Kabuterimon","Leomon","Angemon","Bakemon","Drimogemon","Ogremon","Garurumon","Kuwagamon","Vegiemon","Ninjamon","Frigimon","Mojyamon","Champion","Megadramon","Phoenixmon","Vademon","Andromon","Devimon","SkullGreymon","Giromon","MegaSeadramon","MetalGreymon","MetalMamemon","Mamemon","HKabuterimon","Piximon","Digitamamon","Monzaemon","Etemon","Ultimate","getDigimon","dn","find","d","getSpecialDigimonInfo","StyledPanes","styled","div","_templateObject","_taggedTemplateLiteral","StyledPane","_templateObject2","StyledSelect","Form","Select","_templateObject3","StyledButton","Button","_templateObject4","StyledSettingsButton","_templateObject5","FormCheck","Check","_templateObject6","StyledIcon","img","_templateObject7","StyledCard","Card","_templateObject8","StyledInput","Control","_templateObject9","StatRow","props","hideIrrelevant","value","_jsx","_Fragment","_jsxs","className","class","children","title","tooltipText","label","RequirementsTable","options","rolledDigimon","currentDigimon","labels","Table","striped","bordered","hover","style","width","showSpoilers","src","concat","battle","InfoCard","variant","body","Badge","bg","href","DigiSlotMachine","setCurrentDigimon","useState","setRolledDigimon","omitErrors","setOmitErrors","omittedDigimon","setOmittedDigimon","bonusText","setBonusText","showNaturalBonusText","setShowNaturalBonusText","showSettings","setShowSettings","errorText","setErrorText","setOptions","showSpecialDigimon","showOmitTags","showInfoText","setLabels","toggleOption","optionFlag","prevOptions","rollDigimon","potentialEvolutions","filter","includes","randomDigi","Math","floor","random","length","specialDigiInfo","prevLabels","tableElem","document","getElementById","scrollIntoView","onChange","e","target","map","onClick","Alert","onClose","dismissible","Heading","defaultChecked","id","placeholder","onBlur","values","split","badValues","goodValues","digi","trimmed","trim","Object","push","localStorage","setItem","JSON","stringify","handleOmit","join","ReactDOM","render","React","StrictMode"],"mappings":"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","file":"static/js/main.dc566f1c.chunk.js","sourcesContent":["import EvolutionRequirements from \"./EvolutionRequirements\";\n\nexport enum Level {\n    Fresh,\n    InTraining,\n    Rookie,\n    Champion,\n    Ultimate\n}\n\nexport enum Type {\n    Data,\n    Vaccine,\n    Virus\n}\n\nexport enum DigimonName {\n    Botamon = \"Botamon\",\n    Poyomon = \"Poyomon\",\n    Punimon = \"Punimon\",\n    Yuramon = \"Yuramon\",\n    Koromon = \"Koromon\",\n    Tanemon = \"Tanemon\",\n    Tokomon = \"Tokomon\",\n    Tsunomon = \"Tsunomon\",\n    Agumon = \"Agumon\",\n    Betamon = \"Betamon\",\n    Biyomon = \"Biyomon\",\n    Elecmon = \"Elecmon\",\n    Gabumon = \"Gabumon\",\n    Kunemon = \"Kunemon\",\n    Palmon = \"Palmon\",\n    Patamon = \"Patamon\",\n    Penguinmon = \"Penguinmon\",\n    Airdramon = \"Airdramon\",\n    Angemon = \"Angemon\",\n    Bakemon = \"Bakemon\",\n    Birdramon = \"Birdramon\",\n    Centarumon = \"Centarumon\",\n    Coelamon = \"Coelamon\",\n    Devimon = \"Devimon\",\n    Drimogemon = \"Drimogemon\",\n    Frigimon = \"Frigimon\",\n    Garurumon = \"Garurumon\",\n    Greymon = \"Greymon\",\n    Kabuterimon = \"Kabuterimon\",\n    Kokatorimon = \"Kokatorimon\",\n    Kuwagamon = \"Kuwagamon\",\n    Leomon = \"Leomon\",\n    Meramon = \"Meramon\",\n    Mojyamon = \"Mojyamon\",\n    Monochromon = \"Monochromon\",\n    Nanimon = \"Nanimon\",\n    Ninjamon = \"Ninjamon\",\n    Numemon = \"Numemon\",\n    Ogremon = \"Ogremon\",\n    Seadramon = \"Seadramon\",\n    Shellmon = \"Shellmon\",\n    Sukamon = \"Sukamon\",\n    Tyrannomon = \"Tyrannomon\",\n    Unimon = \"Unimon\",\n    Vegiemon = \"Vegiemon\",\n    Whamon = \"Whamon\",\n    Andromon = \"Andromon\",\n    Digitamamon = \"Digitamamon\",\n    Etemon = \"Etemon\",\n    Giromon = \"Giromon\",\n    HKabuterimon = \"HKabuterimon\",\n    Mamemon = \"Mamemon\",\n    Megadramon = \"Megadramon\",\n    MegaSeadramon = \"MegaSeadramon\",\n    MetalGreymon = \"MetalGreymon\",\n    MetalMamemon = \"MetalMamemon\",\n    Monzaemon = \"Monzaemon\",\n    Phoenixmon = \"Phoenixmon\",\n    Piximon = \"Piximon\",\n    SkullGreymon = \"SkullGreymon\",\n    Vademon = \"Vademon\",\n}\n\nexport class Digimon {\n    constructor(\n        public readonly name: DigimonName,\n        public readonly level: Level,\n        public readonly type: Type,\n        public readonly req: EvolutionRequirements,\n        public readonly evolutionPath: Array<DigimonName>,\n        public readonly digimonBonus?: DigimonName,\n        ) {\n    }\n}","export default class EvolutionRequirements {\n    constructor(\n        public readonly hp: number,\n        public readonly mp: number,\n        public readonly offense: number,\n        public readonly defense: number,\n        public readonly speed: number,\n        public readonly brains: number,\n        public readonly care: number,\n        public readonly weight: number,\n        public readonly discipline: number,\n        public readonly happiness: number,\n        public readonly battles: number,\n        public readonly techs: number,\n        public readonly minCare: boolean,\n        public readonly minBattles: boolean,\n    ) {\n    }\n}\n","import EvolutionRequirements from \"./EvolutionRequirements\";\nimport { Digimon, DigimonName, Level, Type } from \"./Digimon\";\n\nexport const digimonList = [\n    // Botamon\n    new Digimon(\n        DigimonName.Botamon,\n        Level.Fresh,\n        Type.Data,\n        new EvolutionRequirements(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false), \n        [DigimonName.Koromon, DigimonName.Sukamon]\n    ),\n    // Poyomon\n    new Digimon(\n        DigimonName.Poyomon,\n        Level.Fresh,\n        Type.Data,\n        new EvolutionRequirements(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false), \n        [DigimonName.Tokomon, DigimonName.Sukamon]\n    ),\n    // Punimon\n    new Digimon(\n        DigimonName.Punimon,\n        Level.Fresh,\n        Type.Data,\n        new EvolutionRequirements(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false), \n        [DigimonName.Tsunomon, DigimonName.Sukamon]\n    ),\n    // Yuramon\n    new Digimon(\n        DigimonName.Yuramon,\n        Level.Fresh,\n        Type.Data,\n        new EvolutionRequirements(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false), \n        [DigimonName.Tanemon, DigimonName.Sukamon]\n    ),\n\n    // Koromon\n    new Digimon(\n        DigimonName.Koromon,\n        Level.InTraining,\n        Type.Data,\n        new EvolutionRequirements(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false), \n        [DigimonName.Agumon, DigimonName.Gabumon, DigimonName.Kunemon, DigimonName.Sukamon]\n    ),\n    // Tanemon\n    new Digimon(\n        DigimonName.Tanemon,\n        Level.InTraining,\n        Type.Data,\n        new EvolutionRequirements(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false), \n        [DigimonName.Palmon, DigimonName.Betamon, DigimonName.Kunemon, DigimonName.Sukamon]\n    ),\n    // Tokomon\n    new Digimon(\n        DigimonName.Tokomon,\n        Level.InTraining,\n        Type.Data,\n        new EvolutionRequirements(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false), \n        [DigimonName.Patamon, DigimonName.Biyomon, DigimonName.Kunemon, DigimonName.Sukamon]\n    ),\n    // Tsunomon\n    new Digimon(\n        DigimonName.Tsunomon,\n        Level.InTraining,\n        Type.Data,\n        new EvolutionRequirements(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false), \n        [DigimonName.Elecmon, DigimonName.Penguinmon, DigimonName.Kunemon, DigimonName.Sukamon]\n    ),\n    \n    // Agumon\n    new Digimon(\n        DigimonName.Agumon,\n        Level.Rookie,\n        Type.Vaccine,\n        new EvolutionRequirements(10, 10, 1, 0, 0, 0, 0, 15, 0, 0, 0, 0, false, false), \n        [DigimonName.Greymon, DigimonName.Meramon, DigimonName.Birdramon, DigimonName.Centarumon, DigimonName.Monochromon, DigimonName.Tyrannomon, DigimonName.Numemon, DigimonName.Nanimon, DigimonName.Sukamon],\n        /* Bonus */ DigimonName.Koromon\n    ),\n    // Betamon\n    new Digimon(\n        DigimonName.Betamon,\n        Level.Rookie,\n        Type.Virus,\n        new EvolutionRequirements(10, 10, 0, 1, 0, 0, 0, 15, 0, 0, 0, 0, false, false),\n        [DigimonName.Seadramon, DigimonName.Whamon, DigimonName.Shellmon, DigimonName.Coelamon, DigimonName.Numemon, DigimonName.Nanimon, DigimonName.Sukamon],\n        /* Bonus */ DigimonName.Tanemon, \n    ),\n    // Biyomon\n    new Digimon(\n        DigimonName.Biyomon,\n        Level.Rookie,\n        Type.Vaccine,\n        new EvolutionRequirements(0, 10, 0, 1, 1, 0, 0, 15, 0, 0, 0, 0, false, false), \n        [DigimonName.Birdramon, DigimonName.Airdramon, DigimonName.Kokatorimon, DigimonName.Unimon, DigimonName.Kabuterimon, DigimonName.Numemon, DigimonName.Nanimon, DigimonName.Sukamon],\n        /* Bonus */ DigimonName.Tokomon\n    ),\n    // Elecmon\n    new Digimon(\n        DigimonName.Elecmon,\n        Level.Rookie,\n        Type.Data,\n        new EvolutionRequirements(10, 0, 1, 0, 1, 0, 0, 15, 0, 0, 0, 0, false, false), \n        [DigimonName.Leomon, DigimonName.Angemon, DigimonName.Bakemon, DigimonName.Kokatorimon, DigimonName.Numemon, DigimonName.Nanimon, DigimonName.Sukamon],\n        /* Bonus */ DigimonName.Tsunomon\n    ),\n    // Gabumon\n    new Digimon(\n        DigimonName.Gabumon,\n        Level.Rookie,\n        Type.Data,\n        new EvolutionRequirements(0, 0, 0, 1, 1, 1, 0, 15, 0, 0, 0, 0, false, false), \n        [DigimonName.Centarumon, DigimonName.Monochromon, DigimonName.Drimogemon, DigimonName.Tyrannomon, DigimonName.Ogremon, DigimonName.Garurumon, DigimonName.Numemon, DigimonName.Nanimon, DigimonName.Sukamon],\n        /* Bonus */ DigimonName.Koromon\n    ),\n    // Kunemon\n    new Digimon(\n        DigimonName.Kunemon,\n        Level.Rookie,\n        Type.Virus,\n        new EvolutionRequirements(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false), \n        [DigimonName.Bakemon, DigimonName.Kabuterimon, DigimonName.Kuwagamon, DigimonName.Vegiemon, DigimonName.Numemon, DigimonName.Nanimon, DigimonName.Sukamon]\n    ),\n    // Palmon\n    new Digimon(\n        DigimonName.Palmon,\n        Level.Rookie,\n        Type.Vaccine,\n        new EvolutionRequirements(0, 10, 0, 0, 1, 1, 0, 15, 0, 0, 0, 0, false, false), \n        [DigimonName.Kuwagamon, DigimonName.Vegiemon, DigimonName.Ninjamon, DigimonName.Whamon, DigimonName.Coelamon, DigimonName.Numemon, DigimonName.Nanimon, DigimonName.Sukamon],\n        /* Bonus */ DigimonName.Tanemon\n    ),\n    // Patamon\n    new Digimon(\n        DigimonName.Patamon,\n        Level.Rookie,\n        Type.Data,\n        new EvolutionRequirements(10, 0, 1, 0, 0, 1, 0, 15, 0, 0, 0, 0, false, false), \n        [DigimonName.Drimogemon, DigimonName.Tyrannomon, DigimonName.Ogremon, DigimonName.Leomon, DigimonName.Angemon, DigimonName.Unimon, DigimonName.Numemon, DigimonName.Nanimon, DigimonName.Sukamon],\n        /* Bonus */ DigimonName.Tokomon\n    ),\n    // Penguinmon\n    new Digimon(\n        DigimonName.Penguinmon,\n        Level.Rookie,\n        Type.Data,\n        new EvolutionRequirements(0, 10, 0, 1, 0, 1, 0, 15, 0, 0, 0, 0, false, false), \n        [DigimonName.Whamon, DigimonName.Shellmon, DigimonName.Garurumon, DigimonName.Frigimon, DigimonName.Mojyamon, DigimonName.Numemon, DigimonName.Nanimon, DigimonName.Sukamon],\n        /* Bonus */ DigimonName.Tsunomon\n    ),\n    // Airdramon\n    new Digimon(\n        DigimonName.Airdramon,\n        Level.Champion,\n        Type.Vaccine,\n        new EvolutionRequirements(0, 1000, 0, 0, 100, 100, 1, 30, 90, 0, 0, 35, true, false), \n        [DigimonName.Megadramon, DigimonName.Phoenixmon, DigimonName.Vademon, DigimonName.Sukamon],\n    ),\n    // Angemon\n    new Digimon(\n        DigimonName.Angemon,\n        Level.Champion,\n        Type.Vaccine,\n        new EvolutionRequirements(0, 1000, 0, 0, 0, 100, 0, 20, 0, 0, 0, 35, true, false), \n        [DigimonName.Andromon, DigimonName.Phoenixmon, DigimonName.Devimon, DigimonName.Vademon, DigimonName.Sukamon],\n        /* Bonus */ DigimonName.Patamon\n    ),\n    // Bakemon\n    new Digimon(\n        DigimonName.Bakemon,\n        Level.Champion,\n        Type.Virus,\n        new EvolutionRequirements(0, 1000, 0, 0, 0, 0, 3, 20, 0, 50, 0, 28, false, false), \n        [DigimonName.SkullGreymon, DigimonName.Giromon, DigimonName.Vademon, DigimonName.Sukamon],\n        /* Bonus */ DigimonName.Patamon\n    ),\n    // Birdramon\n    new Digimon(\n        DigimonName.Birdramon,\n        Level.Champion,\n        Type.Vaccine,\n        new EvolutionRequirements(0, 0, 0, 0, 100, 0, 3, 20, 0, 0, 0, 35, false, false), \n        [DigimonName.Phoenixmon, DigimonName.Vademon, DigimonName.Sukamon],\n        /* Bonus */ DigimonName.Biyomon\n    ),\n    // Centarumon\n    new Digimon(\n        DigimonName.Centarumon,\n        Level.Champion,\n        Type.Data,\n        new EvolutionRequirements(0, 0, 0, 0, 0, 100, 3, 30, 60, 0, 0, 28, true, false), \n        [DigimonName.Andromon, DigimonName.Giromon, DigimonName.Vademon, DigimonName.Sukamon]\n    ),\n    // Coelamon\n    new Digimon(\n        DigimonName.Coelamon,\n        Level.Champion,\n        Type.Data,\n        new EvolutionRequirements(0, 0, 0, 100, 0, 0, 3, 30, 0, 0, 5, 35, false, true), \n        [DigimonName.MegaSeadramon, DigimonName.Vademon, DigimonName.Sukamon]\n    ),\n    // Devimon\n    new Digimon(\n        DigimonName.Devimon,\n        Level.Champion,\n        Type.Virus,\n        new EvolutionRequirements(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false), \n        [DigimonName.SkullGreymon, DigimonName.Megadramon, DigimonName.Vademon, DigimonName.Sukamon]\n    ),\n    // Drimogemon\n    new Digimon(\n        DigimonName.Drimogemon,\n        Level.Champion,\n        Type.Data,\n        new EvolutionRequirements(0, 0, 100, 0, 0, 0, 3, 40, 0, 50, 0, 28, false, false), \n        [DigimonName.MetalGreymon, DigimonName.Vademon, DigimonName.Sukamon]\n    ),\n    // Frigimon\n    new Digimon(\n        DigimonName.Frigimon,\n        Level.Champion,\n        Type.Vaccine,\n        new EvolutionRequirements(0, 1000, 0, 0, 0, 100, 5, 30, 0, 50, 0, 28, true, false), \n        [DigimonName.MetalMamemon, DigimonName.Mamemon, DigimonName.Vademon, DigimonName.Sukamon]\n    ),\n    // Garurumon\n    new Digimon(\n        DigimonName.Garurumon,\n        Level.Champion,\n        Type.Vaccine,\n        new EvolutionRequirements(0, 1000, 0, 0, 100, 0, 1, 30, 90, 0, 0, 28, true, false), \n        [DigimonName.SkullGreymon, DigimonName.MegaSeadramon, DigimonName.Vademon, DigimonName.Sukamon]\n    ),\n    // Greymon\n    new Digimon(\n        DigimonName.Greymon,\n        Level.Champion,\n        Type.Vaccine,\n        new EvolutionRequirements(0, 0, 100, 100, 100, 100, 1, 30, 90, 0, 0, 35, true, false), \n        [DigimonName.MetalGreymon, DigimonName.SkullGreymon, DigimonName.Vademon, DigimonName.Sukamon]\n    ),\n    // Kabuterimon\n    new Digimon(\n        DigimonName.Kabuterimon,\n        Level.Champion,\n        Type.Vaccine,\n        new EvolutionRequirements(1000, 1000, 100, 0, 100, 0, 1, 30, 0, 0, 0, 35, true, false), \n        [DigimonName.HKabuterimon, DigimonName.MetalMamemon, DigimonName.Vademon, DigimonName.Sukamon],\n        /* Bonus */ DigimonName.Kunemon\n    ),\n    // Kokatorimon\n    new Digimon(\n        DigimonName.Kokatorimon,\n        Level.Champion,\n        Type.Vaccine,\n        new EvolutionRequirements(1000, 0, 0, 0, 0, 0, 3, 30, 0, 0, 0, 28, false, false), \n        [DigimonName.Phoenixmon, DigimonName.Piximon, DigimonName.Vademon, DigimonName.Sukamon],\n        /* Bonus */ DigimonName.Biyomon\n    ),\n    // Kuwagamon\n    new Digimon(\n        DigimonName.Kuwagamon,\n        Level.Champion,\n        Type.Virus,\n        new EvolutionRequirements(1000, 1000, 100, 0, 100, 0, 5, 30, 0, 0, 0, 28, false, false), \n        [DigimonName.HKabuterimon, DigimonName.Piximon, DigimonName.Vademon, DigimonName.Sukamon],\n        /* Bonus */ DigimonName.Kunemon // Requires \n    ),\n    // Leomon\n    new Digimon(\n        DigimonName.Leomon,\n        Level.Champion,\n        Type.Vaccine,\n        new EvolutionRequirements(0, 0, 100, 0, 100, 100, 1, 20, 0, 0, 10, 35, true, false), \n        [DigimonName.Andromon, DigimonName.Mamemon, DigimonName.Vademon, DigimonName.Sukamon]\n    ),\n    // Meramon\n    new Digimon(\n        DigimonName.Meramon,\n        Level.Champion,\n        Type.Data,\n        new EvolutionRequirements(0, 0, 100, 0, 0, 0, 5, 20, 0, 0, 10, 28, false, false), \n        [DigimonName.MetalGreymon, DigimonName.Andromon, DigimonName.Vademon, DigimonName.Sukamon]\n    ),\n    // Mojyamon\n    new Digimon(\n        DigimonName.Mojyamon,\n        Level.Champion,\n        Type.Vaccine,\n        new EvolutionRequirements(1000, 0, 0, 0, 0, 0, 5, 20, 0, 0, 5, 28, false, true), \n        [DigimonName.SkullGreymon, DigimonName.Mamemon, DigimonName.Vademon, DigimonName.Sukamon]\n    ),\n    // Monochromon\n    new Digimon(\n        DigimonName.Monochromon,\n        Level.Champion,\n        Type.Data,\n        new EvolutionRequirements(1000, 0, 0, 100, 0, 100, 3, 40, 0, 0, 5, 35, true, true), \n        [DigimonName.MetalGreymon, DigimonName.MetalMamemon, DigimonName.Vademon, DigimonName.Sukamon]\n    ),\n    // Nanimon\n    new Digimon(\n        DigimonName.Nanimon,\n        Level.Champion,\n        Type.Virus,\n        new EvolutionRequirements(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false), \n        [DigimonName.Digitamamon, DigimonName.Vademon, DigimonName.Sukamon]\n    ),\n    // Ninjamon\n    new Digimon(\n        DigimonName.Ninjamon,\n        Level.Champion,\n        Type.Data,\n        new EvolutionRequirements(0, 1000, 100, 0, 100, 0, 1, 10, 0, 0, 15, 35, true, false), \n        [DigimonName.Piximon, DigimonName.MetalMamemon, DigimonName.Mamemon, DigimonName.Vademon, DigimonName.Sukamon]\n    ),\n    // Numemon\n    new Digimon(\n        DigimonName.Numemon,\n        Level.Champion,\n        Type.Virus,\n        new EvolutionRequirements(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false), \n        [DigimonName.Monzaemon, DigimonName.Vademon, DigimonName.Sukamon]\n    ),\n    // Ogremon\n    new Digimon(\n        DigimonName.Ogremon,\n        Level.Champion,\n        Type.Virus,\n        new EvolutionRequirements(1000, 0, 100, 0, 0, 0, 5, 30, 0, 0, 15, 35, false, false), \n        [DigimonName.Andromon, DigimonName.Giromon, DigimonName.Vademon, DigimonName.Sukamon]\n    ),\n    // Seadramon\n    new Digimon(\n        DigimonName.Seadramon,\n        Level.Champion,\n        Type.Data,\n        new EvolutionRequirements(1000, 1000, 0, 0, 0, 0, 3, 30, 0, 0, 5, 28, false, true), \n        [DigimonName.Megadramon, DigimonName.MegaSeadramon, DigimonName.Vademon, DigimonName.Sukamon]\n    ),\n    // Shellmon\n    new Digimon(\n        DigimonName.Shellmon,\n        Level.Champion,\n        Type.Data,\n        new EvolutionRequirements(1000, 0, 0, 100, 0, 0, 5, 40, 0, 0, 0, 35, false, false), \n        [DigimonName.HKabuterimon, DigimonName.MegaSeadramon, DigimonName.Vademon, DigimonName.Sukamon],\n        /* Bonus */ DigimonName.Betamon // Betamon requires the extra bonus stats\n    ),\n    // Sukamon\n    new Digimon(\n        DigimonName.Sukamon,\n        Level.Champion,\n        Type.Virus,\n        new EvolutionRequirements(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false), \n        [DigimonName.Etemon, DigimonName.Vademon]\n    ),\n    // Tyrannomon\n    new Digimon(\n        DigimonName.Tyrannomon,\n        Level.Champion,\n        Type.Data,\n        new EvolutionRequirements(1000, 0, 0, 100, 0, 0, 5, 30, 0, 0, 5, 28, true, true), \n        [DigimonName.MetalGreymon, DigimonName.Megadramon, DigimonName.Vademon, DigimonName.Sukamon]\n    ),\n    // Unimon\n    new Digimon(\n        DigimonName.Unimon,\n        Level.Champion,\n        Type.Vaccine,\n        new EvolutionRequirements(1000, 0, 0, 0, 100, 0, 3, 30, 0, 0, 10, 35, true, false), \n        [DigimonName.Giromon, DigimonName.Phoenixmon, DigimonName.Vademon, DigimonName.Sukamon]\n    ),\n    // Vegiemon\n    new Digimon(\n        DigimonName.Vegiemon,\n        Level.Champion,\n        Type.Virus,\n        new EvolutionRequirements(0, 1000, 0, 0, 0, 0, 5, 10, 0, 50, 0, 21, false, false), \n        [DigimonName.Piximon, DigimonName.Vademon, DigimonName.Sukamon]\n    ),\n    // Whamon\n    new Digimon(\n        DigimonName.Whamon,\n        Level.Champion,\n        Type.Vaccine,\n        new EvolutionRequirements(1000, 0, 0, 0, 0, 100, 5, 40, 60, 0, 0, 28, true, false), \n        [DigimonName.MegaSeadramon, DigimonName.Mamemon, DigimonName.Vademon, DigimonName.Sukamon]\n    ),\n    \n    // Andromon\n    new Digimon(\n        DigimonName.Andromon,\n        Level.Ultimate,\n        Type.Vaccine,\n        new EvolutionRequirements(2000, 4000, 200, 400, 200, 400, 5, 40, 95, 0, 30, 30, true, false), \n        [DigimonName.Sukamon]\n    ),\n    // Digitamamon\n    new Digimon(\n        DigimonName.Digitamamon,\n        Level.Ultimate,\n        Type.Data,\n        new EvolutionRequirements(3000, 3000, 400, 400, 400, 300, 0, 10, 0, 0, 100, 49, true, false), \n        [DigimonName.Sukamon]\n    ),\n    // Etemon\n    new Digimon(\n        DigimonName.Etemon,\n        Level.Ultimate,\n        Type.Virus,\n        new EvolutionRequirements(2000, 3000, 400, 200, 400, 300, 0, 15, 0, 0, 50, 49, true, false), \n        []\n    ),\n    // Giromon\n    new Digimon(\n        DigimonName.Giromon,\n        Level.Ultimate,\n        Type.Vaccine,\n        new EvolutionRequirements(0, 0, 400, 0, 300, 400, 15, 5, 0, 95, 100, 35, false, false), \n        [DigimonName.Sukamon]\n    ),\n    // HKabuterimon\n    new Digimon(\n        DigimonName.HKabuterimon,\n        Level.Ultimate,\n        Type.Data,\n        new EvolutionRequirements(7000, 0, 400, 600, 400, 0, 5, 55, 0, 0, 0, 40, true, true), \n        [DigimonName.Sukamon]\n    ),\n    // Mamemon\n    new Digimon(\n        DigimonName.Mamemon,\n        Level.Ultimate,\n        Type.Data,\n        new EvolutionRequirements(0, 0, 400, 300, 300, 400, 15, 5, 0, 90, 0, 25, false, false), \n        [DigimonName.Sukamon]\n    ),\n    // Megadramon\n    new Digimon(\n        DigimonName.Megadramon,\n        Level.Ultimate,\n        Type.Virus,\n        new EvolutionRequirements(3000, 5000, 500, 300, 400, 400, 10, 55, 0, 0, 30, 30, true, false), \n        [DigimonName.Sukamon]\n    ),\n    // MegaSeadramon\n    new Digimon(\n        DigimonName.MegaSeadramon,\n        Level.Ultimate,\n        Type.Data,\n        new EvolutionRequirements(0, 4000, 500, 400, 0, 400, 5, 30, 0, 0, 0, 40, true, true), \n        [DigimonName.Sukamon]\n    ),\n    // MetalGreymon\n    new Digimon(\n        DigimonName.MetalGreymon,\n        Level.Ultimate,\n        Type.Virus,\n        new EvolutionRequirements(4000, 3000, 500, 500, 300, 300, 10, 65, 95, 0, 30, 30, true, false), \n        [DigimonName.Sukamon]\n    ),\n    // MetalMamemon\n    new Digimon(\n        DigimonName.MetalMamemon,\n        Level.Ultimate,\n        Type.Data,\n        new EvolutionRequirements(0, 0, 500, 400, 400, 400, 15, 10, 0, 95, 0, 30, true, false), \n        [DigimonName.Sukamon]\n    ),\n    // Monzaemon\n    new Digimon(\n        DigimonName.Monzaemon,\n        Level.Ultimate,\n        Type.Vaccine,\n        new EvolutionRequirements(3000, 3000, 300, 300, 300, 300, 0, 40, 0, 0, 50, 49, true, false), \n        [DigimonName.Sukamon]\n    ),\n    // Phoenixmon\n    new Digimon(\n        DigimonName.Phoenixmon,\n        Level.Ultimate,\n        Type.Vaccine,\n        new EvolutionRequirements(4000, 4000, 0, 0, 400, 600, 3, 30, 100, 0, 0, 40, true, true), \n        [DigimonName.Sukamon]\n    ),\n    // Piximon\n    new Digimon(\n        DigimonName.Piximon,\n        Level.Ultimate,\n        Type.Data,\n        new EvolutionRequirements(0, 0, 300, 300, 400, 400, 15, 5, 0, 95, 0, 25, false, false), \n        [DigimonName.Sukamon]\n    ),\n    // SkullGreymon\n    new Digimon(\n        DigimonName.SkullGreymon,\n        Level.Ultimate,\n        Type.Virus,\n        new EvolutionRequirements(4000, 6000, 400, 400, 200, 500, 10, 30, 0, 0, 40, 45, false, false), \n        [DigimonName.Sukamon]\n    ),\n    // Vademon\n    new Digimon(\n        DigimonName.Vademon,\n        Level.Ultimate,\n        Type.Virus,\n        new EvolutionRequirements(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false), \n        []\n    ),\n]\n\nexport function getDigimon(dn: DigimonName) { \n    return digimonList.find(d => d.name === dn) as Digimon;\n}\n\nexport const getSpecialDigimonInfo = (dn: DigimonName) => {\n    switch(dn) {\n        case DigimonName.Devimon:\n            return \"Lose a battle with your Angemon while having less than 50% discipline and you'll have a chance to evolve into this digimon.\";\n        case DigimonName.Numemon:\n            return \"Make sure you don't meet the requirements for any other digimon and you'll evolve into this digimon after 96h (4 days) on the Rookie level.\";\n        case DigimonName.Sukamon:\n            return \"Fill your virus bar by allowing your digimon to poop on the ground.\";\n        case DigimonName.Nanimon:\n            return \"Bring happiness and discipline to 0 and scold your Digimon. The easiest way to do so is praising/scolding and then reducing the last bit of discipline by overfeeding. The fly/flower condition will increase your happiness and prevents you from getting this evolution.\";\n        case DigimonName.Vademon:\n            return \"Make sure you don't meet the requirements for any other digimon and you can evolve into this digimon when praising/scolding your Digimon after 240h (10 days) on the Champion level.\";\n        case DigimonName.Kunemon:\n            return `Sleep in the \"Kunemon's Bed\" area and you'll have a chance to evolve into this digimon.`  \n        default:\n            return false;\n    }\n};\n","import styled from \"styled-components\";\r\nimport { Button, Form, Card }  from 'react-bootstrap';\r\n\r\nexport const StyledPanes = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n\r\n    @media screen and (max-width: 768px) {\r\n        flex-direction: column;\r\n    }\r\n`;\r\n\r\nexport const StyledPane = styled.div`\r\n    flex: 50%;\r\n    padding: 10px;\r\n`;\r\n\r\nexport const StyledSelect = styled(Form.Select)`\r\n    width: auto;\r\n    display: inline-block;\r\n    margin-bottom: 20px;\r\n\r\n    @media screen and (max-width: 768px) {\r\n        width: 70%;\r\n    }\r\n`;\r\n\r\nexport const StyledButton = styled(Button)`\r\n    margin-top: -5px;\r\n    margin-left: 10px;\r\n`;\r\n\r\nexport const StyledSettingsButton = styled(Button)`\r\n    display: block;\r\n`;\r\n\r\nexport const FormCheck = styled(Form.Check)`\r\n    cursor: pointer;\r\n    -webkit-touch-callout: none;\r\n    -webkit-user-select: none;\r\n    -khtml-user-select: none;\r\n    -moz-user-select: none;\r\n    -ms-user-select: none;\r\n    user-select: none; \r\n    & input {\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\nexport const StyledIcon = styled.img`\r\n    image-rendering: pixelated;\r\n    image-rendering: -moz-crisp-edges;\r\n    image-rendering: crisp-edges;\r\n    width: 32px;\r\n`;\r\n\r\nexport const StyledCard = styled(Card)`\r\n    margin-top: 30px;\r\n`;\r\n\r\nexport const StyledInput = styled(Form.Control)`\r\n    margin: 10px auto;\r\n`;","import { Table } from \"react-bootstrap\";\nimport { Digimon, Level, Type } from \"../models/Digimon\";\nimport { Labels, Options } from \"./DigiSlotMachine\";\nimport { StyledIcon } from \"./DigiSlotMachine.styled\";\n\nfunction getTypeIcon(type: Type) {\n    return {\n        [Type.Data]: '💾',\n        [Type.Virus]: '🦠',\n        [Type.Vaccine]: '💊'\n    }[type];\n}\n\ninterface ReqTableProps {\n    currentDigimon: Digimon,\n    rolledDigimon?: Digimon,\n    options: Options,\n    showNaturalBonusText?: boolean,\n    labels: Labels\n}\n\ninterface RowProps {\n    class: \"table-primary\" | \"table-secondary\" | \"table-info\" | \"table-warning\" | \"table-danger\",\n    title: string,\n    value: any,\n    tooltipText: string,\n    label?: string,\n    hideIrrelevant?: boolean\n}\n\nfunction StatRow(props: RowProps) {\n    if (props.hideIrrelevant && !props.value) {\n        return <></>\n    }\n    return <tr className={props.class}>\n        <th data-toggle=\"tooltip\" data-placement=\"right\" title={props.tooltipText}>{props.title}</th>\n        <td>{props.label}{props.value}</td>\n    </tr>\n}\n\nexport default function RequirementsTable(props: ReqTableProps) {\n    const { options, rolledDigimon, currentDigimon, labels } = props;\n    const {hideIrrelevant} = options;\n    if (!rolledDigimon) return <></>\n\n    return rolledDigimon && <Table striped bordered hover>\n        <tbody>\n            <tr className='table-secondary'>\n                <th style={{ width: '30%' }}>Name</th>\n                <td style={{ width: '70%' }}>{options.showSpoilers ? <><StyledIcon src={`./imgs/${rolledDigimon.name}.png`}/> {rolledDigimon?.name}</> : '???'}</td>\n            </tr>\n            <tr className='table-secondary'>\n                <th>Type</th>\n                <td>{options.showSpoilers ? <>{getTypeIcon(rolledDigimon.type)} {Type[rolledDigimon?.type]}</> : '???'}</td>\n            </tr>\n            <StatRow hideIrrelevant={hideIrrelevant} title=\"Level\" class='table-secondary' value={Level[rolledDigimon.level]} tooltipText=\"The evolutionary stage of the Digimon.\"/>\n            <StatRow hideIrrelevant={hideIrrelevant} title=\"HP\" class='table-info' value={rolledDigimon.req.hp} tooltipText=\"Your digimon's health. Increased by HP training at the Gym.\"/>\n            <StatRow hideIrrelevant={hideIrrelevant} title=\"MP\" class='table-info' value={rolledDigimon.req.mp} tooltipText=\"Your digimon's magic points. Increased by MP training at the Gym.\"/>\n            <StatRow hideIrrelevant={hideIrrelevant} title=\"OFFENSE\" class='table-info' value={rolledDigimon.req.offense} tooltipText=\"Improves damage from your attacks. Increased by offense training at the Gym.\"/>\n            <StatRow hideIrrelevant={hideIrrelevant} title=\"DEFENSE\" class='table-info' value={rolledDigimon.req.defense} tooltipText=\"Reduces damage taken from attacks. Increased by defense training at the Gym.\"/>\n            <StatRow hideIrrelevant={hideIrrelevant} title=\"SPEED\" class='table-info' value={rolledDigimon.req.speed} tooltipText=\"Affects how often your digimon attacks. Increased by speed training at the Gym.\"/>\n            <StatRow hideIrrelevant={hideIrrelevant} title=\"BRAINS\" class='table-info' value={rolledDigimon.req.brains} tooltipText=\"Unlocks more options for guiding your digimon during battle. Increased by brain training at the Gym.\"/>\n            <StatRow hideIrrelevant={hideIrrelevant} title=\"CARE MISTAKES\" class='table-primary' label={labels.care} value={rolledDigimon.req.care} tooltipText=\"Ignoring your food, poop or sleep bubbles will cause a care mistake.\" />\n            <StatRow hideIrrelevant={hideIrrelevant} title=\"WEIGHT\" class='table-danger' value={rolledDigimon.req.weight} tooltipText=\"Weight is gained when digimon is fed food. Weight is lost over time and when exercising.\"/>\n            <StatRow hideIrrelevant={hideIrrelevant} title=\"DISCIPLINE\" class='table-warning' value={rolledDigimon.req.discipline} tooltipText=\"The digimon's discipline value. The higher the better.\"/>\n            <StatRow hideIrrelevant={hideIrrelevant} title=\"HAPPINESS\" class='table-warning' value={rolledDigimon.req.happiness} tooltipText=\"The digimon's happiness value. The higher the better.\"/>\n            <StatRow hideIrrelevant={hideIrrelevant} title=\"BATTLES\" class='table-warning' label={labels.battle} value={rolledDigimon.req.battles} tooltipText=\"The total number of battles that the digimon has fought.\"/>\n            <StatRow hideIrrelevant={hideIrrelevant} title=\"TECHNIQUES\" class='table-warning' value={rolledDigimon.req.techs} tooltipText=\"The total number of techniques that the digimon has learned.\"/>\n            {rolledDigimon.digimonBonus === currentDigimon.name && <StatRow title=\"DIGIMON BONUS\" class='table-warning' value={rolledDigimon.digimonBonus} tooltipText=\"Your digimon gets a free natural bonus point towards this digivolution\"/>}\n        </tbody>\n    </Table>\n}","import { Badge } from \"react-bootstrap\";\nimport { StyledCard } from \"./DigiSlotMachine.styled\";\n\nexport default function InfoCard() {\n    return <StyledCard variant=\"secondary\" body>\n        <h2>What?</h2>\n        <p>This tool randomly selects a valid digimon evolution for you to digivolve your digimon into, but doesn't tell you what that digimon will be.</p>\n        <h2>Why?</h2>\n        <p>Digimon World 1 is an infamously challenging game which doesn't share much about its inner workings. In the case of digivolution, it can be exhausting and time-consuming getting the same awful digimon over and over again.</p>\n        <p>This tool was created to help make the experience of playing the game a little bit more enjoyable, whilst retaining the fun and excitement of getting a new, unknown digimon.</p>\n        <h2>How?</h2>\n        <ul>\n            <li>\n                Digivolution outcomes are affected by four different criteria:\n                <ul>\n                    <li><Badge bg=\"info\">Stats</Badge></li>\n                    <li><Badge bg=\"primary\">Care Mistakes</Badge></li>\n                    <li><Badge bg=\"danger\">Weight</Badge></li>\n                    <li><Badge bg=\"warning\">Bonus Criteria</Badge></li>\n                </ul>\n            </li>\n            <li>3 criteria must be met to be eligible for the evolution</li>\n            <li>Some Digimon have a natural advantage to evolve into a certain Digimon by always fulfilling the bonus requirement for free</li>\n        </ul>\n        <p>In-depth information about evolution within Digimon World can be found <a href=\"https://gamefaqs.gamespot.com/ps/913684-digimon-world/faqs/73845\"> here</a>, with thanks to <a href=\"https://twitter.com/sydmontague\">SydMontague</a> for the research that made this tool possible</p>\n\n    </StyledCard>\n}","import { useState } from \"react\";\nimport { Digimon, DigimonName, Level } from \"../models/Digimon\";\nimport { digimonList, getDigimon, getSpecialDigimonInfo } from \"../models/DigimonList\";\nimport { Alert }  from 'react-bootstrap';\nimport { FormCheck, StyledButton, StyledIcon, StyledInput, StyledPane, StyledPanes, StyledSelect, StyledSettingsButton } from './DigiSlotMachine.styled';\nimport RequirementsTable from \"./RequirementsTable\";\nimport InfoCard from \"./InfoCard\";\n\nexport interface Options {\n    showSpecialDigimon: boolean;\n    showOmitTags: boolean;\n    showInfoText: boolean;\n    hideIrrelevant: boolean;\n    showSpoilers: boolean;\n}\n\nexport interface Labels {\n    care: string;\n    battle: string;\n}\n\nexport default function DigiSlotMachine() {\n    const [currentDigimon, setCurrentDigimon] = useState<Digimon>(getDigimon(DigimonName.Agumon)!);\n    const [rolledDigimon, setRolledDigimon] = useState<Digimon>();\n\n    // TODO: Rename. These are the errors that show up after omitting digimon incorrectly\n    const [omitErrors, setOmitErrors] = useState<Array<string>>([]);\n    const [omittedDigimon, setOmittedDigimon] = useState<Array<DigimonName>>([]);\n\n    const [bonusText, setBonusText] = useState<string>('');\n    const [showNaturalBonusText, setShowNaturalBonusText] = useState(false);\n    const [showSettings, setShowSettings] = useState(true);\n    const [errorText, setErrorText] = useState<string>('');\n\n    const [options, setOptions] = useState<Options>({\n        showSpecialDigimon: false,\n        showOmitTags: false,\n        showInfoText: true,\n        hideIrrelevant: true,\n        showSpoilers: false\n    });\n    \n    const [labels, setLabels] = useState<Labels>({\n        care: '',\n        battle: '',\n    });\n\n    function setDefaults() {\n        setBonusText('');\n        setErrorText('');\n        setShowNaturalBonusText(false);\n    }\n\n    function toggleOption(optionFlag: keyof Options) {\n        setOptions(prevOptions => ({\n            ...prevOptions,\n            [optionFlag]: !prevOptions[optionFlag]\n        }))\n    }\n\n    function rollDigimon(currentDigimon: Digimon) {\n        // Clear all transient labels\n        setDefaults();\n\n        // Filter out only the allowed evolustions\n        // Also, ignore special evos (numemon, sukamon) if it's toggled off\n        const potentialEvolutions = digimonList\n            .filter(dn => {\n                // Return false if specials are disabled and it's a special digi\n                if (!options.showSpecialDigimon && getSpecialDigimonInfo(dn.name)) {\n                    return false;\n                }\n                // Return false if digimon is specifically omitted\n                if (omittedDigimon.includes(dn.name)) {\n                    return false;\n                }\n                // Otherwise return true if it's a valid evolution\n                return currentDigimon.evolutionPath.includes(dn.name);\n            });\n\n        // Get a random digimon from the list of valid evolutions\n        const randomDigi = potentialEvolutions[Math.floor(Math.random()*potentialEvolutions.length)];\n        if (!randomDigi) { \n            return setErrorText('There are no possible evolutions for that digimon! You may need to refine your settings.');\n        }\n        setRolledDigimon(randomDigi);\n        \n        // If the rolled digimon has special bonus conditions, let the user know\n        if (randomDigi.digimonBonus === currentDigimon.name) {\n            setShowNaturalBonusText(true);\n        }\n        \n        // If the rolled digimon is a \"special\" digimon, let them know how to evolve into it\n        const specialDigiInfo = getSpecialDigimonInfo(randomDigi.name);\n        if (specialDigiInfo) {\n            setBonusText(`This is a special digimon. ${specialDigiInfo}`);\n        }\n\n        // TODO: Re-visit labels for battles and care\n        if (randomDigi.req.battles > 0) {\n            setLabels(prevLabels => ({ ...prevLabels, battle: randomDigi.req.minBattles ? '≤' : '≥' }));\n        }\n\n        if (randomDigi.req.care > 0) {\n            setLabels(prevLabels => ({ ...prevLabels, care: randomDigi.req.minCare ? '≤' : '≥' }));\n        }\n\n        const tableElem = document.getElementById('table-heading');\n        tableElem?.scrollIntoView();\n    }\n\n    function handleOmit(value: string) {\n        const values = value.split(',');\n        const badValues = [];\n        const goodValues = [];\n\n        for (const digi of values) {\n            const trimmed = digi.trim() as DigimonName;\n            if (!trimmed) continue;\n            if (!Object.values(DigimonName).includes(trimmed)) {\n                badValues.push(trimmed);\n            } else {\n                goodValues.push(trimmed);\n            }\n        }\n        if (badValues) {\n            // There was a problem parsing the string of omissions from the user\n            setOmitErrors(badValues);\n        }\n        // Acknowledge the good ones regardless\n        localStorage.setItem('omittedDigimon', JSON.stringify(goodValues));\n        setOmittedDigimon(goodValues);\n    }\n\n    // TODO: Hover over stats for details\n    return <StyledPanes>\n        <StyledPane>\n            <h2>Your current Digimon: {currentDigimon && <StyledIcon src={`./imgs/${currentDigimon.name}.png`}/>}</h2>\n            <StyledSelect name=\"evolutions\" value={currentDigimon.name} onChange={(e: any) => setCurrentDigimon(getDigimon(e.target.value as unknown as DigimonName))}>\n                {digimonList.map(d => <option key={d.name} value={d.name}>{Level[d.level]} - {d.name}</option>)}\n            </StyledSelect>\n            <StyledButton variant=\"primary\" onClick={() => rollDigimon(currentDigimon)}>Roll!</StyledButton> \n            {errorText && <p className='text-danger'>{errorText}</p>}\n            {bonusText.length > 0 && <Alert variant=\"info\">{bonusText}</Alert>}\n            {showNaturalBonusText && (\n                <Alert variant=\"warning\">\n                    {currentDigimon.name} gets a free natural bonus point towards this digivolution!\n                </Alert>\n            )}\n            {!showSettings && <StyledSettingsButton variant=\"secondary\" onClick={() => setShowSettings(true)}>⚙ Show settings</StyledSettingsButton>}\n            {showSettings && <Alert variant=\"secondary\" onClose={() => setShowSettings(false)} dismissible>\n                <Alert.Heading>Settings</Alert.Heading>\n\n                <FormCheck \n                    type=\"switch\"\n                    defaultChecked={options.showSpecialDigimon}\n                    id=\"specials-switch\"\n                    label=\"Show special digimon evolutions (eg. Numemon)\"\n                    value={options.showSpecialDigimon}\n                    onClick={() => toggleOption('showSpecialDigimon')}\n                />\n                <FormCheck \n                    type=\"switch\"\n                    defaultChecked={options.showOmitTags}\n                    id=\"omit-switch\"\n                    label=\"Exclude one or more digimon from the results\"\n                    value={options.showOmitTags}\n                    onClick={() => toggleOption('showOmitTags')}\n                />\n                {options.showOmitTags && <>\n                    <StyledInput\n                        type=\"input\"\n                        placeholder=\"eg. Palmon, HKabuterimon (comma-separated)\"\n                        onBlur={(e: any) => handleOmit(e.target.value)} />\n                    {omitErrors.length > 0 && <p className='text-danger'>Unable to exclude the following digimon. Are they spelled correctly?: {omitErrors.join(', ')}</p>}\n                    {omittedDigimon.length > 0 && <p className='text-success'>Excluding the following digimon from results: {omittedDigimon.join(', ')}</p>}\n                </>}\n                <FormCheck \n                    type=\"switch\"\n                    defaultChecked={options.showInfoText}\n                    id=\"help-switch\"\n                    label=\"Show info text\"\n                    value={options.showInfoText}\n                    onClick={() => toggleOption('showInfoText')}\n                />\n                <FormCheck \n                    type=\"switch\"\n                    defaultChecked={options.showInfoText}\n                    id=\"irrel-switch\"\n                    label=\"Hide stats that aren't needed for evolution\"\n                    value={options.hideIrrelevant}\n                    onClick={() => toggleOption('hideIrrelevant')}\n                />\n                <hr/>\n                <FormCheck \n                    type=\"switch\"\n                    defaultChecked={options.showSpoilers}\n                    id=\"spoilers-switch\"\n                    label=\"Show target digimon name and type (spoilers!)\"\n                    value={options.showSpoilers}\n                    onClick={() => toggleOption('showSpoilers')}\n                />\n            </Alert>}\n            {options.showInfoText && <InfoCard />}\n        </StyledPane>\n        <StyledPane>\n            <h2 id=\"table-heading\">Target Digivolution Criteria</h2>\n            <p>The following table shows the required attributes that your digimon needs to meet in order to digivolve into the selected digimon.</p>\n            {rolledDigimon\n                ? <RequirementsTable\n                    rolledDigimon={rolledDigimon}\n                    currentDigimon={currentDigimon}\n                    labels={labels}\n                    options={options} />\n                : <p className={'text-info'}>Click the \"Roll\" button to receive a random digimon's evolution requirements</p>}\n            \n        </StyledPane>\n    </StyledPanes>;\n\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport DigiSlotMachine from './components/DigiSlotMachine';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <div className=\"App\">\n      <h1 className='display-4'>Digimon World 1 Evolution Slot Machine</h1>\n      <p className='lead'>This tool provides the criteria for digivolving your digimon into another randomly selected digimon.</p>\n      <DigiSlotMachine />\n      <p className='text-end'>If you encounter any problems or would like to request a feature, please <a href=\"https://github.com/jackphilippi/digislots\">raise an issue on Github</a>.</p>\n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}